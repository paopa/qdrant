#version 450

#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_shuffle : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable

#define LINKS_LAYOUT_SET 1
#include "links.comp"

#define NEAREST_HEAP_LAYOUT_SET 2
#include "nearest_heap.comp"

#define INPUT_SIZE 1024

layout(set = 0, binding = 0) buffer ScoredPointsInput {
    ScoredPoint data[];
} input_points;

layout(set = 0, binding = 1) buffer ScoresOuput {
    float data[];
} scores_output;

layout(set = 0, binding = 2) buffer SortedOuput {
    ScoredPoint data[];
} sorted_output;

void main() {
    nearest_heap_init();
    uint idx = gl_GlobalInvocationID.x / SUBGROUP_SIZE;

    for (uint i = 0; i < INPUT_SIZE; i++) {
        ScoredPoint point = input_points.data[i];
        push_nearest(point);

        float nearest_smaller_score_check = subgroupMin(nearest_smaller_score);
        bool is_different = nearest_smaller_score_check != nearest_smaller_score;
        if (subgroupAny(is_different)) {
            if (subgroupElect()) {
                scores_output.data[idx * INPUT_SIZE + i] = positive_infinity;
            }
        } else if (subgroupElect()) {
            scores_output.data[idx * INPUT_SIZE + i] = nearest_smaller_score;
        }
    }

    sort_nearest();
}
